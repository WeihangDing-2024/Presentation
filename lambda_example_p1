"""
How we deal with damage calculation in a game 
WITHOUT using lambda functions.
"""


class Character:
    """
    A class representing a character in a game.
    can be Barbarian, Wizard, Paladin, etc.
    """

    def __init__(self, hp, attack, defend):
        self.hp = hp
        self.attack = attack
        self.defend = defend


class DamageCalculator:
    """
    we will need to define a class to represent the different ways
    """
    MINUS_METHOD = 1
    TIMES_METHOD = 2
    TRUE_DAMAGE = 3


class BattleManager:
    """
    without lambda function we have to switch between different cases
    there can be a lot of cases in a real game
    This code will grow INCREDIBLY LONG as more characters are designed
    """
    def deal_damage(attacker, defender, calculator, args):
        if calculator == DamageCalculator.MINUS_METHOD:
            damage = attacker.attack - defender.defend
        elif calculator == DamageCalculator.TIMES_METHOD:
            damage = round(attacker.attack * (defender.defend *
                           1.0 / (args[0] + defender.defend)))
        elif calculator == DamageCalculator.TRUE_DAMAGE:
            damage = args[0]
        else:
            damage = 0

        # we will not consider buffs here because it's just an example
        defender.hp -= damage


# example of how to use the code

def main():
    attacker = Character(hp=100, attack=50, defend=20)
    defender = Character(hp=100, attack=30, defend=10)
    # -----------------------------------
    # example of not using lambda function
    # deal damage using minus method
    BattleManager.deal_damage(
        attacker, defender, DamageCalculator.MINUS_METHOD, [])

    # deal damage using times method
    BattleManager.deal_damage(
        attacker, defender, DamageCalculator.TIMES_METHOD, [10])

    # deal damage using true damage method
    BattleManager.deal_damage(
        attacker, defender, DamageCalculator.TRUE_DAMAGE, [10])
